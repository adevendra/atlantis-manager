package datamodel

import (
	"atlantis/manager/helper"
	. "launchpad.net/gocheck"
)

func (s *DatamodelSuite) TestApp(c *C) {
	Zk.RecursiveDelete(helper.GetBaseAppPath())
	apps, err := ListRegisteredApps()
	c.Assert(err, Not(IsNil)) // the path doesn't exist. this is an error
	c.Assert(len(apps), Equals, 0)
	app1, err := GetApp(app)
	c.Assert(err, Not(IsNil))
	app1, err = CreateOrUpdateApp(true, true, "http", app, repo, root, "jigish@ooyala.com",
		map[string]string{"prod": "google.com:80", "staging": "bing.com:80"})
	c.Assert(err, IsNil)
	c.Assert(app1.NonAtlantis, Equals, true)
	c.Assert(app1.Internal, Equals, true)
	c.Assert(app1.Name, Equals, app)
	c.Assert(app1.Repo, Equals, repo)
	c.Assert(app1.Root, Equals, root)
	c.Assert(app1.Email, Equals, "jigish@ooyala.com")
	c.Assert(app1.AddDepender("oogabooga"), Not(IsNil))
	app1, err = CreateOrUpdateApp(true, true, "http", app, repo, root, "jigish@ooyala.com",
		map[string]string{"prod": "google.com:80", "oogabooga": "oogabooga.com:80"})
	app2, err := CreateOrUpdateApp(false, true, "http", "oogabooga", repo, root, "jigish@ooyala.com", map[string]string{})
	c.Assert(app1.AddDepender("oogabooga"), IsNil)
	c.Assert(app1.HasDepender("oogabooga"), Equals, true)
	apps, err = ListRegisteredApps()
	c.Assert(err, IsNil)
	c.Assert(len(apps), Equals, 2)
	app1, err = GetApp(app)
	c.Assert(err, IsNil)
	c.Assert(app1.NonAtlantis, Equals, true)
	c.Assert(app1.Internal, Equals, true)
	c.Assert(app1.Name, Equals, app)
	c.Assert(app1.Repo, Equals, repo)
	c.Assert(app1.Root, Equals, root)
	c.Assert(app1.Email, Equals, "jigish@ooyala.com")
	c.Assert(app1.HasDepender("oogabooga"), Equals, true)
	app1, err = CreateOrUpdateApp(false, true, "http", app, repo+"2", root+"2", "oogabooga@ooyala.com", map[string]string{})
	c.Assert(err, IsNil)
	c.Assert(app1.NonAtlantis, Equals, false)
	c.Assert(app1.Internal, Equals, true)
	c.Assert(app1.Name, Equals, app)
	c.Assert(app1.Repo, Equals, repo+"2")
	c.Assert(app1.Root, Equals, root+"2")
	c.Assert(app1.Email, Equals, "oogabooga@ooyala.com")
	c.Assert(app1.HasDepender("oogabooga"), Equals, true)
	c.Assert(app1.RemoveDepender("oogabooga"), IsNil)
	c.Assert(app1.HasDepender("oogabooga"), Equals, false)
	app1, err = CreateOrUpdateApp(false, false, "http", app, repo+"2", root+"2", "oogabooga@ooyala.com", map[string]string{})
	c.Assert(err, Not(IsNil))
	apps, err = ListRegisteredApps()
	c.Assert(err, IsNil)
	c.Assert(len(apps), Equals, 2)
	app1, err = GetApp(app)
	c.Assert(err, IsNil)
	c.Assert(app1.NonAtlantis, Equals, false)
	c.Assert(app1.Name, Equals, app)
	c.Assert(app1.Repo, Equals, repo+"2")
	c.Assert(app1.Root, Equals, root+"2")
	c.Assert(app1.Email, Equals, "oogabooga@ooyala.com")
	c.Assert(app1.HasDepender("oogabooga"), Equals, false)
	c.Assert(app1.Delete(), IsNil)
	c.Assert(app2.Delete(), IsNil)
	apps, err = ListRegisteredApps()
	c.Assert(err, IsNil) // the path exists, not an error
	c.Assert(len(apps), Equals, 0)
	app1, err = GetApp(app)
	c.Assert(err, Not(IsNil))
}
